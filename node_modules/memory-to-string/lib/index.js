'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = convertToFrontEnd;
exports.convertToFrontEndRaw = convertToFrontEndRaw;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var getTabs = _lodash2['default'].memoize(function (depth) {
  return _lodash2['default'].times(depth, function () {
    return '  ';
  }).join('');
});

exports.getTabs = getTabs;

function convertToFrontEnd(object, namespace, options) {
  options = options || {};
  var output = [options.prefix || ''];
  output.push('' + namespace + ' = ' + convertToFrontEndRaw(object) + ';\n');
  output.push(options.suffix || '');
  return output.join('');
}

;

function convertToFrontEndRaw(object) {
  var depth = arguments[1] === undefined ? 0 : arguments[1];

  var tabs = getTabs(depth);
  var tabs2 = getTabs(depth + 1);
  var output;
  if (_lodash2['default'].isFunction(object)) {
    output = object.toString().replace(/\n\s*/mg, '\n' + tabs2);
    var lastNewLine = output.lastIndexOf('\n');
    return output.substring(0, lastNewLine) + output.substring(lastNewLine).replace(/\n\s*/m, '\n' + tabs);
  } else if (_lodash2['default'].isArray(object)) {
    output = '[\n';
    var parts = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = object[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var object_item = _step.value;

        parts.push(convertToFrontEndRaw(object_item, depth + 1));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    output += tabs2 + parts.join(',\n' + tabs2) + '\n';
    return output + tabs + ']';
  } else if (_lodash2['default'].isObject(object)) {
    output = '{\n';
    var parts = [];
    for (var field in object) {
      parts.push(field + ': ' + convertToFrontEndRaw(object[field], depth + 1));
    }
    output += tabs2 + parts.join(',\n' + tabs2) + '\n';
    return output + tabs + '}';
  } else if (_lodash2['default'].isNumber(object) || _lodash2['default'].isBoolean(object)) {
    return '' + object;
  } else if (_lodash2['default'].isString(object)) {
    return '\'' + object.replace('"', '\\"').replace('\'', '\\\'') + '\'';
  } else {
    return 'undefined';
  }
}

;

